source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
cat(rep('-', 3))
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
AnalyzeDataset <- function(n, models=c('Logistic Regression', 'Quadratic Discriminant Analysis', 'Random Forest'), verbose=TRUE) {
Dataset <- read.csv(sprintf('dataset%i.csv', n))
cat(rep('_', 100), '\n', sprintf('DATASET %i', n), '\n', sep='')
results <- lapply(
models,
function(model, D=Dataset)
do.call(paste(str_split(model, ' ')[[1]], collapse=''), list(D))
)
i <- which.min(sapply(results, function(l) l[['Error']]))
print(sprintf('BEST MODEL: %s', toupper(models[i])))
cat(sprintf('    \"ERROR: %f3 units\"', results[[i]][['Error']]))
cat('\n\n')
return (results)
}
a
names(a) <- c('a', 's')
a
AnalyzeDataset(1, verbose=FALSE)[['Logistic Regression']][['Log Odds']]
AnalyzeDataset <- function(n, models=c('Logistic Regression', 'Quadratic Discriminant Analysis', 'Random Forest'), verbose=TRUE) {
Dataset <- read.csv(sprintf('dataset%i.csv', n))
names(models) <- models
cat(rep('_', 100), '\n', sprintf('DATASET %i', n), '\n', sep='')
results <- lapply(
models,
function(model, D=Dataset)
do.call(paste(str_split(model, ' ')[[1]], collapse=''), list(D, verbose))
)
i <- which.min(sapply(results, function(l) l[['Error']]))
if (verbose) {
print(sprintf('BEST MODEL: %s', toupper(models[i])))
cat(sprintf('    \"ERROR: %f3 units\"', results[[i]][['Error']]))
cat('\n\n')
}
return (results)
}
LogisticRegression <- function(Dataset, verbose=TRUE) {
model <- glm(target ~ ., data = Dataset, family = binomial(link = "logit"))
logOdds <- predict(model, newdata = Dataset, type = "response")
error <- PopulationExponentialError(logOdds)
print("LOGISTIC REGRESSION")
cat('Log Odds: ', logOdds, '\n', 'Error: ', error, ' units\n\n', sep='')
return (list(
`Log Odds`=logOdds,
`Error`=error
))
}
QuadraticDiscriminantAnalysis <- function(Dataset, verbose=TRUE) {
model <- qda(target ~ ., data = Dataset)
logOdds <- predict(model, newdata = Dataset)$posterior[,2]
error <- PopulationExponentialError(logOdds)
print("QUADRATIC DISCRIMINANT ANALYSIS")
cat('Log Odds: ', logOdds, '\n', 'Error: ', error, ' units\n\n', sep='')
return (list(
`Log Odds`=logOdds,
`Error`=error
))
}
RandomForest <- function(Dataset, verbose=TRUE) {
Dataset <- Dataset %>% mutate(target=as.factor(target))
model <- randomForest(target ~ ., data = Dataset, mtry=floor(sqrt(ncol(Dataset) - 1)), ntree = 500)
logOdds <- predict(model, newdata = Dataset, type = "prob")[,2]
error <- PopulationExponentialError(logOdds)
print("RANDOM FOREST")
cat('Log Odds: ', logOdds, '\n', 'Error: ', error, ' units\n\n', sep='')
return (list(
`Log Odds`=logOdds,
`Error`=error
))
}
PopulationExponentialError <- function(logOdds) {
odds <- exp(logOdds)
probabilities <- odds/(1 + odds)
roots_odds <- sqrt(odds)
return (sum(probabilities/roots_odds + (1 - probabilities)*roots_odds))
}
lapply(1:5, AnalyzeDataset)
substring(c('asdf', 'sdff'), 1, 1)
AnalyzeDataset <- function(n, models=c('Logistic Regression', 'Quadratic Discriminant Analysis', 'Random Forest'), verbose=TRUE) {
Dataset <- read.csv(sprintf('dataset%i.csv', n))
names(models) <- substring(models, 1, 1)
cat(rep('_', 100), '\n', sprintf('DATASET %i', n), '\n', sep='')
results <- lapply(
models,
function(model, D=Dataset)
do.call(paste(str_split(model, ' ')[[1]], collapse=''), list(D, verbose))
)
i <- which.min(sapply(results, function(l) l[['Error']]))
if (verbose) {
print(sprintf('BEST MODEL: %s', toupper(models[i])))
cat(sprintf('    \"ERROR: %f3 units\"', results[[i]][['Error']]))
cat('\n\n')
}
return (results)
}
AnalyzeDataset(1, verbose=FALSE)[['QDA']][['Log Odds']]
AnalyzeDataset(1, verbose=FALSE)
AnalyzeDataset <- function(n, models=c('Logistic Regression', 'Quadratic Discriminant Analysis', 'Random Forest'), verbose=TRUE) {
Dataset <- read.csv(sprintf('dataset%i.csv', n))
names(models) <- sapply(model, function(s) substring(strsplit(s, ' '), 1, 1))
cat(rep('_', 100), '\n', sprintf('DATASET %i', n), '\n', sep='')
results <- lapply(
models,
function(model, D=Dataset)
do.call(paste(str_split(model, ' ')[[1]], collapse=''), list(D, verbose))
)
i <- which.min(sapply(results, function(l) l[['Error']]))
if (verbose) {
print(sprintf('BEST MODEL: %s', toupper(models[i])))
cat(sprintf('    \"ERROR: %f3 units\"', results[[i]][['Error']]))
cat('\n\n')
}
return (results)
}
AnalyzeDataset(1, verbose=FALSE)
AnalyzeDataset <- function(n, models=c('Logistic Regression', 'Quadratic Discriminant Analysis', 'Random Forest'), verbose=TRUE) {
Dataset <- read.csv(sprintf('dataset%i.csv', n))
names(models) <- sapply(models, function(s) substring(strsplit(s, ' '), 1, 1))
cat(rep('_', 100), '\n', sprintf('DATASET %i', n), '\n', sep='')
results <- lapply(
models,
function(model, D=Dataset)
do.call(paste(str_split(model, ' ')[[1]], collapse=''), list(D, verbose))
)
i <- which.min(sapply(results, function(l) l[['Error']]))
if (verbose) {
print(sprintf('BEST MODEL: %s', toupper(models[i])))
cat(sprintf('    \"ERROR: %f3 units\"', results[[i]][['Error']]))
cat('\n\n')
}
return (results)
}
AnalyzeDataset(1, verbose=FALSE)
substring(strsplit('Quadratic Discriminant Analysis', ' '), 1, 1)
strsplit('Quadratic Discriminant Analysis', ' ')
substring(strsplit('Quadratic Discriminant Analysis', ' ')[[1]], 1, 1)
AnalyzeDataset <- function(n, models=c('Logistic Regression', 'Quadratic Discriminant Analysis', 'Random Forest'), verbose=TRUE) {
Dataset <- read.csv(sprintf('dataset%i.csv', n))
names(models) <- sapply(models, function(s) cat(substring(strsplit(s, ' ')[[1]], 1, 1)))
cat(rep('_', 100), '\n', sprintf('DATASET %i', n), '\n', sep='')
results <- lapply(
models,
function(model, D=Dataset)
do.call(paste(str_split(model, ' ')[[1]], collapse=''), list(D, verbose))
)
i <- which.min(sapply(results, function(l) l[['Error']]))
if (verbose) {
print(sprintf('BEST MODEL: %s', toupper(models[i])))
cat(sprintf('    \"ERROR: %f3 units\"', results[[i]][['Error']]))
cat('\n\n')
}
return (results)
}
AnalyzeDataset(1, verbose=FALSE)
AnalyzeDataset <- function(n, models=c('Logistic Regression', 'Quadratic Discriminant Analysis', 'Random Forest'), verbose=TRUE) {
Dataset <- read.csv(sprintf('dataset%i.csv', n))
names(models) <- sapply(models, function(s) paste(substring(strsplit(s, ' ')[[1]], 1, 1)), collapse='')
cat(rep('_', 100), '\n', sprintf('DATASET %i', n), '\n', sep='')
results <- lapply(
models,
function(model, D=Dataset)
do.call(paste(str_split(model, ' ')[[1]], collapse=''), list(D, verbose))
)
i <- which.min(sapply(results, function(l) l[['Error']]))
if (verbose) {
print(sprintf('BEST MODEL: %s', toupper(models[i])))
cat(sprintf('    \"ERROR: %f3 units\"', results[[i]][['Error']]))
cat('\n\n')
}
return (results)
}
AnalyzeDataset(1, verbose=FALSE)
AnalyzeDataset <- function(n, models=c('Logistic Regression', 'Quadratic Discriminant Analysis', 'Random Forest'), verbose=TRUE) {
Dataset <- read.csv(sprintf('dataset%i.csv', n))
names(models) <- sapply(models, function(s) paste(substring(strsplit(s, ' ')[[1]], 1, 1), collapse=''))
cat(rep('_', 100), '\n', sprintf('DATASET %i', n), '\n', sep='')
results <- lapply(
models,
function(model, D=Dataset)
do.call(paste(str_split(model, ' ')[[1]], collapse=''), list(D, verbose))
)
i <- which.min(sapply(results, function(l) l[['Error']]))
if (verbose) {
print(sprintf('BEST MODEL: %s', toupper(models[i])))
cat(sprintf('    \"ERROR: %f3 units\"', results[[i]][['Error']]))
cat('\n\n')
}
return (results)
}
AnalyzeDataset(1, verbose=FALSE)
AnalyzeDataset(1, verbose=FALSE)[['QDA']][['Log Odds']]
lapply(1:5, AnalyzeDataset)
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
which.min(c(23, 34, 12))
results <- LogisticRegression(Dataset)
results
results <- lapply(
models,
function(model, D=Dataset)
do.call(paste(str_split(model, ' ')[[1]], collapse=''), list(D))
)
models=c('Logistic Regression', 'Quadratic Discriminant Analysis', 'Random Forest')
names(models) <- sapply(models, function(s) paste(substring(strsplit(s, ' ')[[1]], 1, 1), collapse=''))
results <- lapply(
models,
function(model, D=Dataset)
do.call(paste(str_split(model, ' ')[[1]], collapse=''), list(D))
)
results
which.min(sapply(results, function(l) l[['Error']]))
i <- which.min(sapply(results, function(l) l[['Error']]))
cat(rep('_', 100), '\n', sprintf('DATASET %i', n), '\n', sep='')
print(sprintf('BEST MODEL: %s', toupper(models[i])))
cat(sprintf('    \"ERROR: %.3f units\"', results[[i]][['Error']]))
cat('\n\n')
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
AnalyzeDataset(1)
AnalyzeDataset(2)
AnalyzeDataset(2, verbose=FALSE, verbose_model=FALSE)
a <- AnalyzeDataset(3, F, F)
a <- AnalyzeDataset(3, verbose=FALSE, verbose_model=FALSE)
a <- AnalyzeDataset(3)
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
View(Dataset)
var(Dataset['feature_1'])
Dataset
var(Dataset['features_1'])
var(Dataset)
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
class(ANSWER)
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
QuadraticDiscriminantAnalysis(1, verbose=FALSE)[['Log Odds']]
class(1)
mode(1)
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5 Statistical Learning/Assignments/2/Classification analysis.R")
{
if (!exists('.Packages')) {  # create default sessions
if (length(.packages()) > 7)
lapply(paste0('package:', .packages()[1:(length(.packages()) - 7)]), function(p)
suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
rm(list=objects(all.names=TRUE))
setwd('~')
}
else{  # restore previous script
if (length(.allPackages))
lapply(paste0('package:', unlist(.allPackages)), function(p)
suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
rm(list=objects(all.names=TRUE))
load('~/R/.prvEnvironment.RData')
invisible(lapply(.prvPackages, function(p)
suppressPackageStartupMessages(require(p, quietly=TRUE, character.only=TRUE))))
setwd(.prvDirectory)
rm(.prvPackages, .prvDirectory)
}
cat('\n', ifelse(exists('.active'), paste('Current File:', .active), 'R session reset...'), '\n\n', sep='')
}
{
if (!exists('.Packages')) {  # create default sessions
if (length(.packages()) > 7)
lapply(paste0('package:', .packages()[1:(length(.packages()) - 7)]), function(p)
suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
rm(list=objects(all.names=TRUE))
setwd('~')
}
else{  # restore previous script
if (length(.allPackages))
lapply(paste0('package:', unlist(.allPackages)), function(p)
suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
rm(list=objects(all.names=TRUE))
load('~/R/.prvEnvironment.RData')
invisible(lapply(.prvPackages, function(p)
suppressPackageStartupMessages(require(p, quietly=TRUE, character.only=TRUE))))
setwd(.prvDirectory)
rm(.prvPackages, .prvDirectory)
}
cat('\n', ifelse(exists('.active'), paste('Current File:', .active), 'R session reset...'), '\n\n', sep='')
}
(.packages())
# START ----
.Packages <- 'tictoc, tidyverse, openxlsx, readODS, data.table'; {
.Packages <- strsplit(.Packages, ', ')[[1]]
.curScript <- rstudioapi::getSourceEditorContext()$path
.inactive <- function() {
if (exists('.active'))
if (.active == .curScript)
return (FALSE)
return (TRUE)
}
.include <- function(p) {
if (!is.element(p, rownames(installed.packages())))
install.packages(p, quiet=TRUE)
.nOldPackages <- length(.packages())
suppressPackageStartupMessages(require(p, quietly=TRUE, character.only=TRUE))
return (.packages()[1:(length(.packages()) - .nOldPackages)])
}
.exclude <- function(packages)
lapply(paste0('package:', packages), function(p)
suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
if (.inactive()) {
.prvDirectory <- getwd()
if (exists('.allPackages')) {
if (length(.prvPackages <- names(.allPackages)))
.exclude(unlist(.allPackages))
} else if (length(.packages()) > 7) {
.exclude(.prvPackages <- .packages()[1:(length(.packages()) - 7)])
} else
.prvPackages <- c()
.prvOs <- setdiff(objects(all.names=TRUE), c('.Packages', '.curScript', '.inactive', '.include', '.exclude'))
save(list=.prvOs, file='~/R/.prvEnvironment.RData', envir=.GlobalEnv)
rm(list=.prvOs)
.active <- .curScript
.allPackages <- sapply(.Packages, .include, simplify=FALSE)
}
.curDirectory <- ''
if (.curDirectory == '')
.curDirectory <- dirname(.curScript)
setwd(ifelse(.curDirectory == '', '~', .curDirectory))
.oldPackages <- setdiff(names(.allPackages), .Packages)
for (p in .oldPackages) {
.exclude(.allPackages[[p]])
.allPackages[[p]] <- NULL
}
.newPackages <- setdiff(.Packages, names(.allPackages))
for (p in .newPackages)
.allPackages[[p]] <- .include(p)
rm(p)
cat('\nCurrent File: ', ifelse(.active!='', .active, 'unsaved'), '\n\n', sep='')
}
# START ----
.Packages <- 'tictoc, tidyverse, openxlsx, readODS, data.table'; {
.Packages <- strsplit(.Packages, ', ')[[1]]
.curScript <- rstudioapi::getSourceEditorContext()$path
.inactive <- function() {
if (exists('.active'))
if (.active == .curScript)
return (FALSE)
return (TRUE)
}
.include <- function(p) {
if (!is.element(p, rownames(installed.packages())))
install.packages(p, quiet=TRUE)
.nOldPackages <- length(.packages())
suppressPackageStartupMessages(require(p, quietly=TRUE, character.only=TRUE))
return (.packages()[1:(length(.packages()) - .nOldPackages)])
}
.exclude <- function(packages)
lapply(paste0('package:', packages), function(p)
suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
if (.inactive()) {
.prvDirectory <- getwd()
if (exists('.allPackages')) {
if (length(.prvPackages <- names(.allPackages)))
.exclude(unlist(.allPackages))
} else if (length(.packages()) > 7) {
.exclude(.prvPackages <- .packages()[1:(length(.packages()) - 7)])
} else
.prvPackages <- c()
.prvOs <- setdiff(objects(all.names=TRUE), c('.Packages', '.curScript', '.inactive', '.include', '.exclude'))
save(list=.prvOs, file='~/R/.prvEnvironment.RData', envir=.GlobalEnv)
rm(list=.prvOs)
.active <- .curScript
.allPackages <- sapply(.Packages, .include, simplify=FALSE)
}
.curDirectory <- ''
if (.curDirectory == '')
.curDirectory <- dirname(.curScript)
setwd(ifelse(.curDirectory == '', '~', .curDirectory))
.oldPackages <- setdiff(names(.allPackages), .Packages)
for (p in .oldPackages) {
.exclude(.allPackages[[p]])
.allPackages[[p]] <- NULL
}
.newPackages <- setdiff(.Packages, names(.allPackages))
for (p in .newPackages)
.allPackages[[p]] <- .include(p)
rm(p)
cat('\nCurrent File: ', ifelse(.active!='', .active, 'unsaved'), '\n\n', sep='')
}
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5+ Embedded Systems/Embedded dev. board project/Power-performance report/Plots.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5+ Embedded Systems/Embedded dev. board project/Power-performance report/Plots.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5+ Embedded Systems/Embedded dev. board project/Power-performance report/Plots.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5+ Embedded Systems/Embedded dev. board project/Power-performance report/Plots.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5+ Embedded Systems/Embedded dev. board project/Power-performance report/Plots.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5+ Embedded Systems/Embedded dev. board project/Power-performance report/Plots.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5+ Embedded Systems/Embedded dev. board project/Power-performance report/Plots.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5+ Embedded Systems/Embedded dev. board project/Power-performance report/Plots.R")
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5+ Embedded Systems/Embedded dev. board project/Power-performance report/Plots.R")
{
if (!exists('.Packages')) {  # create default sessions
if (length(.packages()) > 7)
lapply(paste0('package:', .packages()[1:(length(.packages()) - 7)]), function(p)
suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
rm(list=objects(all.names=TRUE))
setwd('~')
}
else{  # restore previous script
if (length(.allPackages))
lapply(paste0('package:', unlist(.allPackages)), function(p)
suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
rm(list=objects(all.names=TRUE))
load('~/R/.prvEnvironment.RData')
invisible(lapply(.prvPackages, function(p)
suppressPackageStartupMessages(require(p, quietly=TRUE, character.only=TRUE))))
setwd(.prvDirectory)
rm(.prvPackages, .prvDirectory)
}
cat('\n', ifelse(exists('.active'), paste('Current File:', .active), 'R session reset...'), '\n\n', sep='')
}
{
if (!exists('.Packages')) {  # create default sessions
if (length(.packages()) > 7)
lapply(paste0('package:', .packages()[1:(length(.packages()) - 7)]), function(p)
suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
rm(list=objects(all.names=TRUE))
setwd('~')
}
else{  # restore previous script
if (length(.allPackages))
lapply(paste0('package:', unlist(.allPackages)), function(p)
suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
rm(list=objects(all.names=TRUE))
load('~/R/.prvEnvironment.RData')
invisible(lapply(.prvPackages, function(p)
suppressPackageStartupMessages(require(p, quietly=TRUE, character.only=TRUE))))
setwd(.prvDirectory)
rm(.prvPackages, .prvDirectory)
}
cat('\n', ifelse(exists('.active'), paste('Current File:', .active), 'R session reset...'), '\n\n', sep='')
}
# START ----
.Packages <- 'tictoc, tidyverse'; {
.Packages <- strsplit(.Packages, ', ')[[1]]
.curScript <- rstudioapi::getSourceEditorContext()$path
.inactive <- function() {
if (exists('.active'))
if (.active == .curScript)
return (FALSE)
return (TRUE)
}
.include <- function(p) {
if (!is.element(p, rownames(installed.packages())))
install.packages(p, quiet=TRUE)
.nOldPackages <- length(.packages())
suppressPackageStartupMessages(require(p, quietly=TRUE, character.only=TRUE))
return (.packages()[1:(length(.packages()) - .nOldPackages)])
}
.exclude <- function(packages)
lapply(paste0('package:', packages), function(p)
suppressWarnings(detach(p, character.only=TRUE, unload=TRUE)))
if (.inactive()) {
.prvDirectory <- getwd()
if (exists('.allPackages')) {
if (length(.prvPackages <- names(.allPackages)))
.exclude(unlist(.allPackages))
} else if (length(.packages()) > 7) {
.exclude(.prvPackages <- .packages()[1:(length(.packages()) - 7)])
} else
.prvPackages <- c()
.prvOs <- setdiff(objects(all.names=TRUE), c('.Packages', '.curScript', '.inactive', '.include', '.exclude'))
save(list=.prvOs, file='~/R/.prvEnvironment.RData', envir=.GlobalEnv)
rm(list=.prvOs)
.active <- .curScript
.allPackages <- sapply(.Packages, .include, simplify=FALSE)
}
.curDirectory <- ''
if (.curDirectory == '')
.curDirectory <- dirname(.curScript)
setwd(ifelse(.curDirectory == '', '~', .curDirectory))
.oldPackages <- setdiff(names(.allPackages), .Packages)
for (p in .oldPackages) {
.exclude(.allPackages[[p]])
.allPackages[[p]] <- NULL
}
.newPackages <- setdiff(.Packages, names(.allPackages))
for (p in .newPackages)
.allPackages[[p]] <- .include(p)
rm(p)
cat('\nCurrent File: ', ifelse(.active!='', .active, 'unsaved'), '\n\n', sep='')
}
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5+ Embedded Systems/Embedded dev. board project/Power-performance report/Data analysis.R")
ggplot(data=DATA) + geom_point(mapping=aes(PartitionPoint1, InferenceTime1, color=Order)) + facet_grid(Graph ~ .)
source("C:/Users/Hp/OneDrive - UvA/Econometrics/Year 2/Resources/Semester 1/5+ Embedded Systems/Embedded dev. board project/Power-performance report/Data analysis.R")
ggplot(data=DATA) + geom_point(mapping=aes(PartitionPoint1, InferenceTime1, color=Order)) + facet_wrap( ~ Graph)
ggplot(data=DATA) + geom_point(mapping=aes(PartitionPoint1, InferenceTime1, color=Order)) + facet_wrap( ~ Graph) + geom_smooth(method='lm', alpha=.5,  mapping=aes(fill=Order)) + theme_light()
ggplot(data=DATA, mapping=aes(PartitionPoint1, InferenceTime1)) + geom_point(mapping=aes(color=Order)) + facet_wrap( ~ Graph) + geom_smooth(method='lm', alpha=.5,  mapping=aes(fill=Order)) + theme_light()
ggplot(data=DATA, mapping=aes(PartitionPoint1, InferenceTime1)) + geom_point(mapping=aes(color=Order)) + facet_wrap( ~ Graph) + geom_smooth(method='lm', alpha=.5, se=F, mapping=aes(color=Order)) + theme_light()
ggsave('p.png', plot=ggplot(data=DATA, mapping=aes(PartitionPoint1, InferenceTime1)) + geom_point(mapping=aes(color=Order)) + facet_wrap( ~ Graph) + geom_smooth(method='lm', alpha=.5, se=F, mapping=aes(color=Order)) + theme_light(), width=20, height=10, units='cm')
